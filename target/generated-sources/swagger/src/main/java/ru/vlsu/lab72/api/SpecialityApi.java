/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.vlsu.lab72.api;

import ru.vlsu.lab72.model.Speciality;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-21T15:09:33.921+03:00")

@Api(value = "speciality", description = "the speciality API")
public interface SpecialityApi {

    @ApiOperation(value = "Add speciality to the university", notes = "adding speciality", response = Speciality.class, tags={ "speciality", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Speciality.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/speciality",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Speciality> addSpeciality(@ApiParam(value = "Speciality object that needs to be added" ,required=true )  @Valid @RequestBody Speciality body) {
        // do some magic!
        return new ResponseEntity<Speciality>(HttpStatus.OK);
    }


    @ApiOperation(value = "Deletes a speciality", notes = "", response = Void.class, tags={ "speciality", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Speciality not found", response = Void.class) })
    
    @RequestMapping(value = "/speciality/delete/{specialityId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> deleteSpeciality(@ApiParam(value = "Speciality id to delete",required=true ) @PathVariable("specialityId") Long specialityId) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Find speciality by ID", notes = "Returns a single speciality", response = Speciality.class, tags={ "speciality", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Speciality.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Speciality not found", response = Void.class) })
    
    @RequestMapping(value = "/speciality/{specialityId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Speciality> getSpecialityById(@ApiParam(value = "ID of speciality to return",required=true ) @PathVariable("specialityId") Long specialityId) {
        // do some magic!
        return new ResponseEntity<Speciality>(HttpStatus.OK);
    }


    @ApiOperation(value = "Updates a speciality", notes = "", response = Void.class, tags={ "speciality", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/speciality/{specialityId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateSpeciality(@ApiParam(value = "ID of speciality that needs to be updated",required=true ) @PathVariable("specialityId") Long specialityId,@ApiParam(value = "Updated string of the speciality") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "updated code of speciality") @RequestPart(value="code", required=false)  Long code) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
