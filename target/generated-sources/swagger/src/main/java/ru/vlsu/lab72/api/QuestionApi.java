/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.vlsu.lab72.api;

import ru.vlsu.lab72.model.Question;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-21T15:09:33.921+03:00")

@Api(value = "question", description = "the question API")
public interface QuestionApi {

    @ApiOperation(value = "Add question to the university", notes = "adding question", response = Question.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Question.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/question",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Question> addQuestion(@ApiParam(value = "Question object that needs to be added" ,required=true )  @Valid @RequestBody Question body) {
        // do some magic!
        return new ResponseEntity<Question>(HttpStatus.OK);
    }


    @ApiOperation(value = "Deletes a question", notes = "", response = Void.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Question not found", response = Void.class) })
    
    @RequestMapping(value = "/question/delete/{questionId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> deleteQuestion(@ApiParam(value = "Question id to delete",required=true ) @PathVariable("questionId") Long questionId) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Find question by ID", notes = "Returns a single question", response = Question.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Question.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Question not found", response = Void.class) })
    
    @RequestMapping(value = "/question/{questionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Question> getQuestionById(@ApiParam(value = "ID of question to return",required=true ) @PathVariable("questionId") Long questionId) {
        // do some magic!
        return new ResponseEntity<Question>(HttpStatus.OK);
    }


    @ApiOperation(value = "Updates a question", notes = "", response = Void.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/question/{questionId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateQuestion(@ApiParam(value = "ID of question that needs to be updated",required=true ) @PathVariable("questionId") Long questionId,@ApiParam(value = "Updated string of the question", required=true) @RequestPart(value="question", required=true)  String question) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
